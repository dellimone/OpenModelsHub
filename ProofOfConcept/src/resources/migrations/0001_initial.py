# Generated by Django 5.2.7 on 2025-10-14 17:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assets', '0001_initial'),
        ('research', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComputationalResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human-readable resource name', max_length=255)),
                ('resource_type', models.CharField(choices=[('LOCAL', 'Local'), ('CLOUD', 'Cloud'), ('HPC', 'HPC')], help_text='Type of resource', max_length=20)),
                ('location', models.CharField(help_text='Physical or logical location', max_length=255)),
                ('availability', models.CharField(choices=[('AVAILABLE', 'Available'), ('BUSY', 'Busy'), ('MAINTENANCE', 'Maintenance'), ('OFFLINE', 'Offline')], default='AVAILABLE', help_text='Current status', max_length=20)),
                ('cpu_cores', models.IntegerField(help_text='Number of CPU cores', validators=[django.core.validators.MinValueValidator(1)])),
                ('memory_gb', models.IntegerField(help_text='Total system memory (GB)', validators=[django.core.validators.MinValueValidator(1)])),
                ('gpu_count', models.IntegerField(default=0, help_text='Number of GPU devices', validators=[django.core.validators.MinValueValidator(0)])),
                ('gpu_model', models.CharField(blank=True, help_text='GPU model name', max_length=100)),
                ('pricing_model', models.CharField(help_text='How costs are calculated', max_length=50)),
                ('cost_per_hour', models.DecimalField(decimal_places=4, help_text='Hourly usage cost', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', help_text='Currency code (ISO 4217)', max_length=3)),
                ('energy_efficiency', models.FloatField(blank=True, help_text='Power usage effectiveness (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('carbon_intensity', models.FloatField(blank=True, help_text='kg CO2 per kWh', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='LocalResource',
            fields=[
                ('computationalresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.computationalresource')),
                ('hostname', models.CharField(help_text='Network hostname', max_length=255, unique=True)),
                ('mac_addresses', models.JSONField(default=list, help_text='Network interface MAC addresses')),
                ('local_ip_address', models.GenericIPAddressField(blank=True, help_text='Local network IP', null=True)),
                ('power_consumption_watts', models.IntegerField(blank=True, help_text='Typical power consumption', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('cooling_type', models.CharField(choices=[('AIR', 'Air'), ('LIQUID', 'Liquid'), ('PASSIVE', 'Passive'), ('HYBRID', 'Hybrid')], help_text='Cooling method', max_length=20)),
                ('chassis_type', models.CharField(choices=[('DESKTOP', 'Desktop'), ('TOWER', 'Tower'), ('RACK', 'Rack'), ('BLADE', 'Blade')], help_text='Physical form factor', max_length=20)),
                ('rack_location', models.CharField(blank=True, help_text='Physical rack position', max_length=100)),
                ('asset_tag', models.CharField(blank=True, help_text='Organizational asset ID', max_length=50)),
            ],
            bases=('resources.computationalresource',),
        ),
        migrations.CreateModel(
            name='ResourceAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quota_hours', models.FloatField(help_text='Allocated hours', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cost_allocation_percent', models.FloatField(help_text='Cost share percentage', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('access_priority', models.IntegerField(default=0, help_text='Access priority level')),
                ('start_date', models.DateField(help_text='Allocation start date')),
                ('end_date', models.DateField(blank=True, help_text='Allocation end date (optional)', null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='research.organization')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.computationalresource')),
            ],
            options={
                'unique_together': {('organization', 'resource', 'start_date')},
            },
        ),
        migrations.AddField(
            model_name='computationalresource',
            name='organizations',
            field=models.ManyToManyField(related_name='computational_resources', through='resources.ResourceAllocation', to='research.organization'),
        ),
        migrations.CreateModel(
            name='ResourceUtilization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='When usage began')),
                ('end_time', models.DateTimeField(blank=True, help_text='When usage ended', null=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Total usage time', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cpu_utilization_percent', models.FloatField(help_text='Average CPU usage', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('gpu_utilization_percent', models.FloatField(blank=True, help_text='Average GPU usage', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('memory_usage_gb', models.FloatField(help_text='Peak memory consumption', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('storage_usage_gb', models.FloatField(help_text='Disk space consumed', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('network_io_gb', models.FloatField(default=0.0, help_text='Data transfer volume', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('compute_cost', models.DecimalField(decimal_places=4, help_text='Processing costs', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('storage_cost', models.DecimalField(decimal_places=4, help_text='Data storage costs', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('network_cost', models.DecimalField(decimal_places=4, default=0.0, help_text='Data transfer costs', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_cost', models.DecimalField(decimal_places=4, help_text='Sum of all costs', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(help_text='Currency code (ISO 4217)', max_length=3)),
                ('carbon_footprint_kg', models.FloatField(help_text='CO2 equivalent emissions', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('carbon_footprint_lower', models.FloatField(blank=True, help_text='Lower bound (uncertainty)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('carbon_footprint_upper', models.FloatField(blank=True, help_text='Upper bound (uncertainty)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('energy_consumption_kwh', models.FloatField(help_text='Total energy used', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('water_usage_liters', models.FloatField(blank=True, help_text='Cooling water consumed', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('carbon_intensity_location', models.CharField(help_text='Geographic location for calculations', max_length=100)),
                ('carbon_intensity_value', models.FloatField(help_text='kg CO2/kWh for location', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('peak_usage_metrics', models.JSONField(default=dict, help_text='Maximum resource consumption')),
                ('average_usage_metrics', models.JSONField(default=dict, help_text='Mean resource consumption')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_utilizations', to='assets.experiment')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='utilizations', to='resources.computationalresource')),
            ],
        ),
        migrations.CreateModel(
            name='CloudResource',
            fields=[
                ('computationalresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.computationalresource')),
                ('cloud_provider', models.CharField(choices=[('AWS', 'Amazon Web Services'), ('AZURE', 'Microsoft Azure'), ('GCP', 'Google Cloud Platform'), ('IBM_CLOUD', 'IBM Cloud'), ('ORACLE_CLOUD', 'Oracle Cloud'), ('ALIBABA_CLOUD', 'Alibaba Cloud'), ('DIGITALOCEAN', 'DigitalOcean'), ('OTHER', 'Other')], help_text='Cloud provider', max_length=50)),
                ('provider_region', models.CharField(help_text='Geographic region', max_length=50)),
                ('availability_zone', models.CharField(blank=True, help_text='Specific availability zone', max_length=50)),
                ('account_id', models.CharField(blank=True, help_text='Cloud account ID', max_length=100)),
                ('instance_type', models.CharField(help_text='Provider-specific instance type', max_length=100)),
                ('instance_family', models.CharField(help_text='Instance category', max_length=50)),
                ('virtualization_type', models.CharField(choices=[('HVM', 'Hardware Virtual Machine'), ('PV', 'Paravirtual'), ('CONTAINER', 'Container')], help_text='Virtualization technology', max_length=20)),
                ('tenancy', models.CharField(choices=[('SHARED', 'Shared'), ('DEDICATED', 'Dedicated'), ('HOST', 'Dedicated Host')], help_text='Tenancy model', max_length=20)),
                ('spot_price', models.DecimalField(blank=True, decimal_places=4, help_text='Spot instance price', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('auto_scaling_enabled', models.BooleanField(default=False, help_text='Auto-scaling active')),
                ('min_instances', models.IntegerField(default=1, help_text='Min instance count', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_instances', models.IntegerField(default=1, help_text='Max instance count', validators=[django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'indexes': [models.Index(fields=['cloud_provider', 'provider_region'], name='resources_c_cloud_p_3f8f94_idx'), models.Index(fields=['instance_type'], name='resources_c_instanc_b074de_idx')],
            },
            bases=('resources.computationalresource',),
        ),
        migrations.CreateModel(
            name='HPCResource',
            fields=[
                ('computationalresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.computationalresource')),
                ('cluster_name', models.CharField(help_text='HPC cluster identifier', max_length=100)),
                ('total_nodes', models.IntegerField(help_text='Total compute nodes', validators=[django.core.validators.MinValueValidator(1)])),
                ('node_configuration', models.JSONField(default=dict, help_text='Per-node hardware specification')),
                ('scheduler_type', models.CharField(choices=[('SLURM', 'Slurm'), ('PBS', 'PBS'), ('LSF', 'LSF'), ('SGE', 'SGE'), ('TORQUE', 'TORQUE')], help_text='Job scheduler', max_length=20)),
                ('scheduler_version', models.CharField(help_text='Scheduler software version', max_length=50)),
                ('partition_names', models.JSONField(default=list, help_text='Available job partitions')),
                ('queue_limits', models.JSONField(default=dict, help_text='Per-queue resource limits')),
                ('allocation_policy', models.CharField(choices=[('EXCLUSIVE', 'Exclusive'), ('SHARED', 'Shared')], help_text='Node allocation strategy', max_length=20)),
                ('max_job_duration', models.IntegerField(help_text='Maximum job runtime (hours)', validators=[django.core.validators.MinValueValidator(1)])),
                ('interconnect_type', models.CharField(choices=[('INFINIBAND', 'InfiniBand'), ('ETHERNET', 'Ethernet'), ('OMNI_PATH', 'Omni-Path'), ('PROPRIETARY', 'Proprietary')], help_text='Network interconnect type', max_length=20)),
                ('parallel_filesystem', models.CharField(choices=[('LUSTRE', 'Lustre'), ('GPFS', 'GPFS'), ('BEEGFS', 'BeeGFS'), ('NFS', 'NFS'), ('CEPH', 'Ceph')], help_text='Shared parallel filesystem', max_length=20)),
            ],
            options={
                'indexes': [models.Index(fields=['cluster_name'], name='resources_h_cluster_c7b804_idx'), models.Index(fields=['scheduler_type'], name='resources_h_schedul_e4e0fe_idx')],
            },
            bases=('resources.computationalresource',),
        ),
        migrations.AddIndex(
            model_name='computationalresource',
            index=models.Index(fields=['resource_type', 'availability'], name='resources_c_resourc_1b158f_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceutilization',
            index=models.Index(fields=['experiment', 'start_time'], name='resources_r_experim_716d31_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceutilization',
            index=models.Index(fields=['resource', 'start_time'], name='resources_r_resourc_d4301a_idx'),
        ),
    ]
