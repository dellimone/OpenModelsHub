# Generated by Django 5.2.7 on 2025-10-14 17:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('research', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='System-generated unique identifier', primary_key=True, serialize=False)),
                ('persistent_identifier', models.CharField(help_text='External persistent ID (DOI, ARK, etc.)', max_length=255, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Human-readable asset name', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the asset')),
                ('version', models.CharField(help_text='Version identifier (e.g., v2.1.0)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last modification timestamp')),
                ('version_notes', models.TextField(blank=True, help_text='Description of version changes')),
                ('license', models.CharField(help_text='Usage license (SPDX identifier preferred)', max_length=100)),
                ('subjects', models.JSONField(default=list, help_text='Classification keywords and topics')),
                ('access_rights', models.CharField(choices=[('PUBLIC', 'Public'), ('REGISTERED', 'Registered Users'), ('RESTRICTED', 'Restricted Access'), ('EMBARGOED', 'Embargoed')], help_text='Access level', max_length=20)),
                ('checksum', models.CharField(help_text='File integrity hash', max_length=128)),
                ('checksum_algorithm', models.CharField(choices=[('MD5', 'MD5 (legacy)'), ('SHA1', 'SHA-1 (legacy)'), ('SHA256', 'SHA-256'), ('SHA512', 'SHA-512')], default='SHA256', help_text='Hash algorithm used', max_length=20)),
                ('file_paths', models.JSONField(default=list, help_text='List of dataset file locations')),
                ('total_size_bytes', models.BigIntegerField(help_text='Combined size of all files', validators=[django.core.validators.MinValueValidator(1)])),
                ('format', models.CharField(choices=[('CSV', 'CSV'), ('JSON', 'JSON'), ('JSONL', 'JSON Lines'), ('PARQUET', 'Parquet'), ('HDF5', 'HDF5'), ('ARROW', 'Arrow'), ('AVRO', 'Avro'), ('TFRECORD', 'TFRecord'), ('PICKLE', 'Pickle'), ('NPY', 'NumPy'), ('IMAGE_FOLDER', 'Image Folder'), ('TEXT_FILES', 'Text Files'), ('AUDIO_FILES', 'Audio Files'), ('OTHER', 'Other')], help_text='Primary data format', max_length=20)),
                ('schema', models.JSONField(blank=True, help_text='Data structure definition', null=True)),
                ('num_records', models.BigIntegerField(blank=True, help_text='Total number of data points', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('num_features', models.IntegerField(blank=True, help_text='Number of input columns', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('target_column', models.CharField(blank=True, help_text='Column with labels/outcomes', max_length=100)),
                ('data_types', models.JSONField(default=dict, help_text='Column type mapping {col: type}')),
                ('missing_values_count', models.JSONField(default=dict, help_text='Missing data per column {col: count}')),
                ('categorical_columns', models.JSONField(default=list, help_text='Non-numeric classification columns')),
                ('numerical_columns', models.JSONField(default=list, help_text='Numeric data columns')),
                ('privacy_level', models.CharField(choices=[('PUBLIC', 'Public'), ('INTERNAL', 'Internal'), ('CONFIDENTIAL', 'Confidential'), ('RESTRICTED', 'Restricted'), ('ANONYMIZED', 'Anonymized')], help_text='Data sensitivity level', max_length=20)),
                ('ethical_considerations', models.TextField(blank=True, help_text='Bias, fairness, and ethical notes')),
                ('collection_method', models.CharField(blank=True, help_text='How data was gathered', max_length=255)),
                ('sampling_strategy', models.CharField(blank=True, help_text='Data sampling approach', max_length=255)),
                ('created_by', models.ForeignKey(help_text='Asset creator', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to='research.researcher')),
                ('organization', models.ForeignKey(help_text='Owning institution', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assets', to='research.organization')),
                ('parent_version', models.ForeignKey(blank=True, help_text='Parent version in lineage', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_versions', to='assets.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='System-generated unique identifier', primary_key=True, serialize=False)),
                ('persistent_identifier', models.CharField(help_text='External persistent ID (DOI, ARK, etc.)', max_length=255, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Human-readable asset name', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the asset')),
                ('version', models.CharField(help_text='Version identifier (e.g., v2.1.0)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last modification timestamp')),
                ('version_notes', models.TextField(blank=True, help_text='Description of version changes')),
                ('license', models.CharField(help_text='Usage license (SPDX identifier preferred)', max_length=100)),
                ('subjects', models.JSONField(default=list, help_text='Classification keywords and topics')),
                ('access_rights', models.CharField(choices=[('PUBLIC', 'Public'), ('REGISTERED', 'Registered Users'), ('RESTRICTED', 'Restricted Access'), ('EMBARGOED', 'Embargoed')], help_text='Access level', max_length=20)),
                ('checksum', models.CharField(help_text='File integrity hash', max_length=128)),
                ('checksum_algorithm', models.CharField(choices=[('MD5', 'MD5 (legacy)'), ('SHA1', 'SHA-1 (legacy)'), ('SHA256', 'SHA-256'), ('SHA512', 'SHA-512')], default='SHA256', help_text='Hash algorithm used', max_length=20)),
                ('experiment_type', models.CharField(choices=[('TRAINING', 'Training'), ('VALIDATION', 'Validation'), ('TESTING', 'Testing'), ('HYPERPARAMETER_TUNING', 'Hyperparameter Tuning'), ('FINE_TUNING', 'Fine-tuning'), ('TRANSFER_LEARNING', 'Transfer Learning'), ('BENCHMARK', 'Benchmark'), ('OTHER', 'Other')], help_text='Purpose of experiment', max_length=30)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('PAUSED', 'Paused')], db_index=True, default='PENDING', help_text='Execution state', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, db_index=True, help_text='When experiment began', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='When experiment finished', null=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Total execution time', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('config_parameters', models.JSONField(default=dict, help_text='General experiment settings')),
                ('random_seed', models.IntegerField(blank=True, help_text='Reproducibility seed value', null=True)),
                ('reproducibility_hash', models.CharField(blank=True, help_text='Unique fingerprint for reproduction', max_length=64)),
                ('code_repository_url', models.URLField(blank=True, help_text='Link to source code')),
                ('code_commit_hash', models.CharField(blank=True, help_text='Exact code version (Git SHA)', max_length=40)),
                ('environment_specification', models.JSONField(default=dict, help_text='Software dependencies and versions')),
                ('created_by', models.ForeignKey(help_text='Asset creator', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to='research.researcher')),
                ('organization', models.ForeignKey(help_text='Owning institution', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assets', to='research.organization')),
                ('parent_version', models.ForeignKey(blank=True, help_text='Parent version in lineage', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_versions', to='assets.experiment')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('TRAINING', 'Training'), ('VALIDATION', 'Validation'), ('TESTING', 'Testing'), ('HOLDOUT', 'Holdout')], help_text='Usage role (training/validation/testing)', max_length=20)),
                ('split_percentage', models.FloatField(help_text='Percentage of dataset used', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('num_records', models.IntegerField(help_text='Number of records in split', validators=[django.core.validators.MinValueValidator(1)])),
                ('indices_file_path', models.CharField(blank=True, help_text='File with record indices/IDs', max_length=500)),
                ('random_seed', models.IntegerField(help_text='Seed for split generation (reproducibility)')),
                ('preprocessing_applied', models.JSONField(default=list, help_text='Transformations applied')),
                ('augmentation_enabled', models.BooleanField(default=False, help_text='Whether augmentation used')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.dataset')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.experiment')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='datasets',
            field=models.ManyToManyField(related_name='experiments', through='assets.ExperimentDataset', to='assets.dataset'),
        ),
        migrations.CreateModel(
            name='ExperimentMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_name', models.CharField(db_index=True, help_text='Metric identifier (e.g., train_loss)', max_length=100)),
                ('step', models.IntegerField(help_text='Epoch or training step', validators=[django.core.validators.MinValueValidator(0)])),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When metric was recorded')),
                ('value', models.FloatField(help_text='Metric value')),
                ('metric_type', models.CharField(choices=[('LOSS', 'Loss'), ('ACCURACY', 'Accuracy'), ('PRECISION', 'Precision'), ('RECALL', 'Recall'), ('F1', 'F1 Score'), ('AUC', 'AUC'), ('MAE', 'Mean Absolute Error'), ('MSE', 'Mean Squared Error'), ('RMSE', 'Root Mean Squared Error'), ('R2', 'R-squared'), ('PERPLEXITY', 'Perplexity'), ('BLEU', 'BLEU Score'), ('CUSTOM', 'Custom')], default='CUSTOM', help_text='Type of metric', max_length=20)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='assets.experiment')),
            ],
            options={
                'ordering': ['step', 'timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Hyperparameter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parameter_name', models.CharField(db_index=True, help_text='Parameter name (e.g., learning_rate)', max_length=100)),
                ('parameter_value', models.CharField(help_text='Parameter value (stored as string)', max_length=500)),
                ('parameter_type', models.CharField(choices=[('FLOAT', 'Float'), ('INTEGER', 'Integer'), ('STRING', 'String'), ('BOOLEAN', 'Boolean'), ('LIST', 'List'), ('DICT', 'Dictionary')], help_text='Data type', max_length=20)),
                ('display_order', models.IntegerField(default=0, help_text='UI presentation order')),
                ('is_tunable', models.BooleanField(default=False, help_text='If part of hyperparameter search space')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hyperparameters', to='assets.experiment')),
            ],
            options={
                'ordering': ['display_order', 'parameter_name'],
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='System-generated unique identifier', primary_key=True, serialize=False)),
                ('persistent_identifier', models.CharField(help_text='External persistent ID (DOI, ARK, etc.)', max_length=255, unique=True)),
                ('name', models.CharField(db_index=True, help_text='Human-readable asset name', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the asset')),
                ('version', models.CharField(help_text='Version identifier (e.g., v2.1.0)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last modification timestamp')),
                ('version_notes', models.TextField(blank=True, help_text='Description of version changes')),
                ('license', models.CharField(help_text='Usage license (SPDX identifier preferred)', max_length=100)),
                ('subjects', models.JSONField(default=list, help_text='Classification keywords and topics')),
                ('access_rights', models.CharField(choices=[('PUBLIC', 'Public'), ('REGISTERED', 'Registered Users'), ('RESTRICTED', 'Restricted Access'), ('EMBARGOED', 'Embargoed')], help_text='Access level', max_length=20)),
                ('checksum', models.CharField(help_text='File integrity hash', max_length=128)),
                ('checksum_algorithm', models.CharField(choices=[('MD5', 'MD5 (legacy)'), ('SHA1', 'SHA-1 (legacy)'), ('SHA256', 'SHA-256'), ('SHA512', 'SHA-512')], default='SHA256', help_text='Hash algorithm used', max_length=20)),
                ('model_file_path', models.CharField(help_text='Location of model file', max_length=500)),
                ('model_file_size', models.BigIntegerField(help_text='Size in bytes', validators=[django.core.validators.MinValueValidator(1)])),
                ('model_format', models.CharField(choices=[('PYTORCH', 'PyTorch'), ('TENSORFLOW_SAVEDMODEL', 'TensorFlow SavedModel'), ('TENSORFLOW_H5', 'TensorFlow H5'), ('ONNX', 'ONNX'), ('KERAS', 'Keras'), ('SCIKIT_LEARN', 'Scikit-learn'), ('XGBOOST', 'XGBoost'), ('LIGHTGBM', 'LightGBM'), ('OTHER', 'Other')], help_text='Model file format', max_length=30)),
                ('architecture', models.TextField(help_text='Model architecture description')),
                ('framework', models.CharField(choices=[('PYTORCH', 'PyTorch'), ('TENSORFLOW', 'TensorFlow'), ('KERAS', 'Keras'), ('SCIKIT_LEARN', 'Scikit-learn'), ('JAX', 'JAX'), ('MXNET', 'MXNet'), ('XGBOOST', 'XGBoost'), ('LIGHTGBM', 'LightGBM'), ('CATBOOST', 'CatBoost'), ('HUGGINGFACE', 'Hugging Face'), ('OTHER', 'Other')], help_text='ML framework used', max_length=30)),
                ('framework_version', models.CharField(help_text='Framework version', max_length=20)),
                ('model_type', models.CharField(choices=[('CLASSIFICATION', 'Classification'), ('REGRESSION', 'Regression'), ('CLUSTERING', 'Clustering'), ('GENERATION', 'Generation'), ('TRANSLATION', 'Translation'), ('SUMMARIZATION', 'Summarization'), ('QUESTION_ANSWERING', 'Question Answering'), ('OBJECT_DETECTION', 'Object Detection'), ('IMAGE_SEGMENTATION', 'Image Segmentation'), ('SPEECH_RECOGNITION', 'Speech Recognition'), ('REINFORCEMENT_LEARNING', 'Reinforcement Learning'), ('OTHER', 'Other')], help_text='ML task type', max_length=40)),
                ('input_schema', models.JSONField(blank=True, help_text='Expected input format specification', null=True)),
                ('output_schema', models.JSONField(blank=True, help_text='Output format specification', null=True)),
                ('inference_time_ms', models.FloatField(blank=True, help_text='Average prediction time (milliseconds)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('model_size_mb', models.FloatField(blank=True, help_text='Model memory footprint (megabytes)', null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_by', models.ForeignKey(help_text='Asset creator', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to='research.researcher')),
                ('organization', models.ForeignKey(help_text='Owning institution', on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assets', to='research.organization')),
                ('parent_version', models.ForeignKey(blank=True, help_text='Parent version in lineage', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_versions', to='assets.model')),
                ('produced_by', models.ForeignKey(blank=True, help_text='Experiment that created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='produced_models', to='assets.experiment')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='base_model',
            field=models.ForeignKey(blank=True, help_text='Base model for fine-tuning (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='finetuning_experiments', to='assets.model'),
        ),
        migrations.CreateModel(
            name='Checkpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('checkpoint_name', models.CharField(help_text='Checkpoint identifier', max_length=100)),
                ('step', models.IntegerField(help_text='Epoch or training step', validators=[django.core.validators.MinValueValidator(0)])),
                ('saved_at', models.DateTimeField(auto_now_add=True, help_text='When checkpoint was saved')),
                ('file_path', models.CharField(help_text='Location of checkpoint file', max_length=500)),
                ('file_size_bytes', models.BigIntegerField(help_text='Checkpoint file size', validators=[django.core.validators.MinValueValidator(1)])),
                ('checksum', models.CharField(help_text='File integrity hash', max_length=128)),
                ('checksum_algorithm', models.CharField(choices=[('MD5', 'MD5 (legacy)'), ('SHA1', 'SHA-1 (legacy)'), ('SHA256', 'SHA-256'), ('SHA512', 'SHA-512')], default='SHA256', max_length=20)),
                ('metrics_snapshot', models.JSONField(default=dict, help_text='Metrics at this checkpoint')),
                ('is_best', models.BooleanField(db_index=True, default=False, help_text='Best checkpoint based on metric')),
                ('is_final', models.BooleanField(default=False, help_text='Final checkpoint (training complete)')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoints', to='assets.experiment')),
                ('model', models.ForeignKey(blank=True, help_text='If checkpoint becomes published model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_checkpoints', to='assets.model')),
            ],
            options={
                'ordering': ['step'],
            },
        ),
        migrations.AddIndex(
            model_name='dataset',
            index=models.Index(fields=['format'], name='assets_data_format_81983a_idx'),
        ),
        migrations.AddIndex(
            model_name='dataset',
            index=models.Index(fields=['privacy_level'], name='assets_data_privacy_c5e39e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='experimentdataset',
            unique_together={('experiment', 'dataset', 'role')},
        ),
        migrations.AddIndex(
            model_name='experimentmetric',
            index=models.Index(fields=['experiment', 'metric_name', 'step'], name='assets_expe_experim_9bee30_idx'),
        ),
        migrations.AddIndex(
            model_name='experimentmetric',
            index=models.Index(fields=['experiment', 'timestamp'], name='assets_expe_experim_dd96cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='experimentmetric',
            unique_together={('experiment', 'metric_name', 'step')},
        ),
        migrations.AddIndex(
            model_name='hyperparameter',
            index=models.Index(fields=['parameter_name', 'parameter_value'], name='assets_hype_paramet_e22474_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='hyperparameter',
            unique_together={('experiment', 'parameter_name')},
        ),
        migrations.AddIndex(
            model_name='model',
            index=models.Index(fields=['framework', 'model_type'], name='assets_mode_framewo_874768_idx'),
        ),
        migrations.AddIndex(
            model_name='model',
            index=models.Index(fields=['model_format'], name='assets_mode_model_f_cebd20_idx'),
        ),
        migrations.AddIndex(
            model_name='experiment',
            index=models.Index(fields=['status', 'start_time'], name='assets_expe_status_a1c10d_idx'),
        ),
        migrations.AddIndex(
            model_name='experiment',
            index=models.Index(fields=['experiment_type'], name='assets_expe_experim_b6361b_idx'),
        ),
        migrations.AddIndex(
            model_name='checkpoint',
            index=models.Index(fields=['experiment', 'step'], name='assets_chec_experim_13d838_idx'),
        ),
        migrations.AddIndex(
            model_name='checkpoint',
            index=models.Index(fields=['experiment', 'is_best'], name='assets_chec_experim_32c3f7_idx'),
        ),
    ]
